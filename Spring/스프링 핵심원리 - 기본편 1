# Spring 이란?

스프링 프레임워크 
 - 핵심기술 : 스프링 DI 컨테이너, AOP, 이벤트 기타
 - 웹 기술 : MVC, Webflux
 - 데이터 접근기술 : 트랙잭션,JDBC,ORM
 
 스프링 부트
  - 스프링을 편리하게 사용할 수 있도록 지원
  - 단독으로 실행할 수 있는 스프링 애플리케이션 쉽게 생성
  - tomcat 과 같은 웹 서버가 내장되어 있어, 별도의 웹서버 설치 X
  - 손쉬운 빌드 구성을 위한 starter 종속성 제공
  - 스프링과 써드 파티 라이브러리 자동구성(스프링 버전과 맞는 외부 라이브러리를 자동 구성함)
  - 매트링, 상태확인, 외부 구성 같은 프로덕션 (모니터링 기본 기능 제공)
  - 관례에 의한 간결한 설정(defalut 설정 및 매뉴얼이 있음)
  
 스프링은 왜 만들었는가??
 
 스프링의 핵심 개념, 컨셉
 
 스프링은 자바 언어 기반의 프레임워크
 자바 언어의 가장 큰 특징 - 객체지향언어
 스프링은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크
 (EJB에 종속되어 객체지향의 의미가 퇴색됨 > 이를 개선하고자 스프링을 만듦)
 
객체지향프로그래밍 : 객체들의 모임으로 파악, 각각의 객체는 메시지를 주고받고 데이터를 처리할 수 있다.
                    유연하고 변경이 용이
                    -> 레고블럭을 조립하듯이, 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법
                    -> 다형성
다형성의 실세계 비유
 - 실세계와 객체지향 1:1 X
 - 역할과 구현으로 세상을 구분함.
 Ex) 운전자 - 자동차 / 공연무대(로미오-줄리엣 역할) / 키보드, 마우스와 같은  부품
     클라이언트에게 영향을 주지않음
     새로운 자동차, 구현이 나오더라도
     
역할과 구현을 분리
 - 역할과 구현으로 구분되면 세상이 단순/유연, 변경도 편리해짐
 - 클라이언트는 대상의 역할(인터페이스)만 알면된다.
 - 클라이언트는 구현 대상의 내부구조를 몰라도 된다.
 - 클라이언트는 구현 대상의 내부구조 변경에 영향을 받지 않는다.
 - 클라이언트는 구현 대상 자체를 변경하여도 영향을 받지 않음.
 자바언어의 다형성을 활용
  역할 = 인터페이스 / 구현은 인터페이스를 구현한 클래스 구현 객체
  객체를 설계할 때 역할과 구현을 명확히 분리

객체의 협력이라는 관계
혼자 있는 객체는 없다.
클라이언트 : 요청 , 서버 : 응답
수 많은 객체 클라이언트와 객체 서버는 협력 관계를 가진다.

자바언어의 오버라이딩

다형성의 본질
인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경
클라이언트를 변경하지 않고 서버 구현 기능을 유연하게 변경가능

인터페이스를 안정적으로 잘 설계하는 것이 중요
역할 자체가 변하면 클라이언트 서버 모두 큰 변경이 발생함.

스프링과 객체지향
다형성이 가장 중요하다.
스프링은 다형성을 극대화 이용
제어의 역전, 의존성 주입은 다형성을 활용해서 역할과 구현을 편리하게 지원


SOLID(좋은 객체지향의 원칙 5가지)
클린코드 - 로버트 마틴이 좋은 객체지향 설계의 5가지 원칙

SRP 단일 책임 원칙
 - 한 클래스는 하나의 책임만 가져야 한다.
 - 하나의 책임이라는 것은 모호함
 - 중요한 기준은 변경이다.
    Ex) UI 변경, 객체의 생성과 사용을 분리
 책임의 범위를 적절하게 조절하는 것이 중요
 
OCP 개방-폐쇄 원칙
확장에는 열려있으나 변경에는 닫혀야 함.
 - 다형성을 활용
 - 인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현
 - 구현 객체를 변경하려면 클라이언트의 변경이 필요했음(기존 MemberService Intor 구현시)
 - 객체를 생성하고 연관관계를 맺어주는 별도의 조립,설정자 필요하다.(스프링의 컨테이너)
 
 LSP 리스코프 치환원칙
 프로그램의 객체는 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 함.
 
 ISP 인터페이스 분리 원칙
 특정 클라이언트를 위한 인터페이스를 여러개 가 범용 인터페이스 하나보다 낫다
 
 DIP 의존관계 역전 원칙
 프로그래머는 "추상화에 의존해야함, 구체화에 의존하면 안된다"
 구현클래스가 아닌 인터페이스에 의존하라는 뜻
 
 정리 
 객체지향의 핵심은 다형성
 다형성만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다. 
 구현객체를 변경할 때 클라이언트 코드도 변경이 있음.
 다형성만으로는 OCP DIP 원칙을 지킬 수 없어 뭔가 더 필요로 함.
 
 스프링은 다음 기술로 다형성 + OCP,DIP 가능하게 지원
  - DI : 의존관게, 의존성 주임
  - DI 컨테이너
  클라이언트 코드 변경없이 기능확장
  
  이론 정리
   - 모든 설계에 역할과 구현을 분리
     EX ) 자동차, 공연 등
   - 애플리케이션 설계도 공연을 설계하듯이 배역만 만들어두고 배우는 언제든지 변경할 수 있도록 만드는 것
   - 이상적으로는 모든 설계에 인터페이스를 부여하자
   
 객체지향 책 : 객체지향의 사실과 오해
 스프링 책 추천 : 토비의 스프링
 JPA 책 추천 : 자바 ORM 표준 Jpa 프로그래밍
 

